//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""cdc088b1-f34d-4ced-8bc8-345dc562a5b4"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4a5f4cee-a1c1-489b-9792-5854a2663678"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d2660d6a-a85c-4bcb-93b3-6d18837ac598"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""48e7f0bc-1c92-4fbb-8da7-4205edad8893"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cd3deec9-0f97-4181-99f1-c859842c4273"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f4b05817-363e-4c2e-8805-6bdb85a69b6b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ed7f74ba-3d26-4067-82d0-1a81d427fe47"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""a1b16f70-e73e-46f1-b275-424eda3ab221"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6982f224-bcc2-40f8-86c1-ec778e79650f"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dc8bdb46-75ea-40e2-91cf-e520f9b091bb"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ce8e92c8-52dd-40bf-9808-c9aff105782f"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""aca19f19-05e0-4443-88a3-b3479534bdb8"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""NextTurn"",
            ""id"": ""ddf6e1c7-5858-4e70-8a67-62abadddaf5a"",
            ""actions"": [
                {
                    ""name"": ""NextPlayer"",
                    ""type"": ""Button"",
                    ""id"": ""5ad18795-b6ed-4bf7-ae62-91e77f79499f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6982c6d8-b0da-4c25-8daf-b896aa2df99e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""NextWorm"",
            ""id"": ""857cfc91-aae5-4416-8622-9011659467c4"",
            ""actions"": [
                {
                    ""name"": ""NextWorm"",
                    ""type"": ""Button"",
                    ""id"": ""dfcb8c04-456a-4b80-9fee-faf46b1d6e90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fc19d406-32da-4065-bd5d-9e884570ff28"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextWorm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        // NextTurn
        m_NextTurn = asset.FindActionMap("NextTurn", throwIfNotFound: true);
        m_NextTurn_NextPlayer = m_NextTurn.FindAction("NextPlayer", throwIfNotFound: true);
        // NextWorm
        m_NextWorm = asset.FindActionMap("NextWorm", throwIfNotFound: true);
        m_NextWorm_NextWorm = m_NextWorm.FindAction("NextWorm", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_Movement;
    public struct PlayerMovementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // NextTurn
    private readonly InputActionMap m_NextTurn;
    private INextTurnActions m_NextTurnActionsCallbackInterface;
    private readonly InputAction m_NextTurn_NextPlayer;
    public struct NextTurnActions
    {
        private @PlayerControls m_Wrapper;
        public NextTurnActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextPlayer => m_Wrapper.m_NextTurn_NextPlayer;
        public InputActionMap Get() { return m_Wrapper.m_NextTurn; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NextTurnActions set) { return set.Get(); }
        public void SetCallbacks(INextTurnActions instance)
        {
            if (m_Wrapper.m_NextTurnActionsCallbackInterface != null)
            {
                @NextPlayer.started -= m_Wrapper.m_NextTurnActionsCallbackInterface.OnNextPlayer;
                @NextPlayer.performed -= m_Wrapper.m_NextTurnActionsCallbackInterface.OnNextPlayer;
                @NextPlayer.canceled -= m_Wrapper.m_NextTurnActionsCallbackInterface.OnNextPlayer;
            }
            m_Wrapper.m_NextTurnActionsCallbackInterface = instance;
            if (instance != null)
            {
                @NextPlayer.started += instance.OnNextPlayer;
                @NextPlayer.performed += instance.OnNextPlayer;
                @NextPlayer.canceled += instance.OnNextPlayer;
            }
        }
    }
    public NextTurnActions @NextTurn => new NextTurnActions(this);

    // NextWorm
    private readonly InputActionMap m_NextWorm;
    private INextWormActions m_NextWormActionsCallbackInterface;
    private readonly InputAction m_NextWorm_NextWorm;
    public struct NextWormActions
    {
        private @PlayerControls m_Wrapper;
        public NextWormActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextWorm => m_Wrapper.m_NextWorm_NextWorm;
        public InputActionMap Get() { return m_Wrapper.m_NextWorm; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NextWormActions set) { return set.Get(); }
        public void SetCallbacks(INextWormActions instance)
        {
            if (m_Wrapper.m_NextWormActionsCallbackInterface != null)
            {
                @NextWorm.started -= m_Wrapper.m_NextWormActionsCallbackInterface.OnNextWorm;
                @NextWorm.performed -= m_Wrapper.m_NextWormActionsCallbackInterface.OnNextWorm;
                @NextWorm.canceled -= m_Wrapper.m_NextWormActionsCallbackInterface.OnNextWorm;
            }
            m_Wrapper.m_NextWormActionsCallbackInterface = instance;
            if (instance != null)
            {
                @NextWorm.started += instance.OnNextWorm;
                @NextWorm.performed += instance.OnNextWorm;
                @NextWorm.canceled += instance.OnNextWorm;
            }
        }
    }
    public NextWormActions @NextWorm => new NextWormActions(this);
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface INextTurnActions
    {
        void OnNextPlayer(InputAction.CallbackContext context);
    }
    public interface INextWormActions
    {
        void OnNextWorm(InputAction.CallbackContext context);
    }
}
